"A date string with format `Y-m-d`, e.g. `2011-05-23`."
scalar Date @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\Date")

"A datetime string with format `Y-m-d H:i:s`, e.g. `2018-05-23 13:43:32`."
scalar DateTime @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")

extend type Query {
    projects(order_by: [OrderByClause!] @orderBy): [Project!] @paginate
    project(id: ID @eq, slug: String @eq): Project @find
}

extend type Mutation @guard(with: ["api"]) {
    createProject(input: CreateProjectInput! @spread): CreateProjectPayload @hasAccess(permission: "create projects")
    updateProject(id: ID! @eq, input: UpdateProjectInput! @spread): UpdateProjectPayload @hasAccess(permission: "edit projects", owner: true, model: "Project")
    deleteProject(id: ID!): DeleteProjectPayload @hasAccess(permission: "delete projects")
}

enum SortOrder {
    ASC
    DESC
}

input OrderByClause {
    column: String!
    order: SortOrder!
}

type Project {
    id: ID!
    title: String!
    slug: String!
    content: String
    link: String
    built_with: [String]
    keywords: [String]
    description: String
    assets: [Media!] @orderBy(column: "order_id")
    user: User!
    start: Date
    end: Date
    created_at: DateTime!
    updated_at: DateTime!
}

input CreateProjectInput {
    title: String! @rules(apply: ["string"])
    content: String!
    link: String @rules(apply: ["url"])
    built_with: [String]
    keywords: [String]
    description: String
    start: Date @rules(apply: ["before:end", "nullable"])
    end: Date @rules(apply: ["after:start", "nullable"])
    assets: [ID]
}

input UpdateProjectInput @validator {
    title: String!
    slug: String!
    content: String!
    link: String
    built_with: [String]
    keywords: [String]
    description: String
    start: Date
    end: Date
    assets: [ID]
}

type CreateProjectPayload {
    project: Project
}

type UpdateProjectPayload {
    project: Project
}

type DeleteProjectPayload {
    project: Project
}

